version: '3.8'

services:
  # Database Service
  chatbot-db:
    image: mariadb:10.11
    container_name: chatbot-db-prod
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=chatbot_root_password_prod
      - MYSQL_DATABASE=chatbot_db
      - MYSQL_USER=chatbot_user
      - MYSQL_PASSWORD=chatbot_password_prod
      - MYSQL_CHARACTER_SET_SERVER=utf8mb4
      - MYSQL_COLLATION_SERVER=utf8mb4_unicode_ci
    volumes:
      - chatbot_db_data_prod:/var/lib/mysql
      - ./backend/database/init:/docker-entrypoint-initdb.d
    networks:
      - chatbot-network
    healthcheck:
      test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 3

  chatbot-api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: chatbot-api:latest
    container_name: chatbot-api-optimized
    
    # GPU Configuration for NVIDIA RTX 5070
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    
    # Environment variables optimized for hardware
    environment:
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - API_WORKERS=1
      - CHATBOT_MODEL_NAME=microsoft/DialoGPT-medium
      - USE_GPU=true
      - GPU_MEMORY_FRACTION=0.8
      - BATCH_SIZE=4
      - MAX_CONCURRENT_REQUESTS=16
      - TORCH_THREADS=16
      - OMP_NUM_THREADS=16
      - CUDA_VISIBLE_DEVICES=0
      - PYTORCH_CUDA_ALLOC_CONF=max_split_size_mb:512
      - LOG_LEVEL=INFO
      - RATE_LIMIT_REQUESTS=100
      - RATE_LIMIT_WINDOW=60
      - DATABASE_URL=mysql+aiomysql://chatbot_user:chatbot_password_prod@chatbot-db:3306/chatbot_db
      - DATABASE_HOST=chatbot-db
      - DATABASE_PORT=3306
      - DATABASE_NAME=chatbot_db
      - DATABASE_USER=chatbot_user
      - DATABASE_PASSWORD=chatbot_password_prod
    
    # Port mapping
    ports:
      - "8000:8000"
    
    # Volume mounts for persistence
    volumes:
      - ./backend/models:/app/models
      - ./backend/logs:/app/logs
      - /tmp/.X11-unix:/tmp/.X11-unix:rw
    
    # Resource limits optimized for 32GB RAM
    mem_limit: 8g
    memswap_limit: 8g
    shm_size: 2g
    
    # CPU configuration for AMD Ryzen 9 8945HX
    cpus: '16.0'
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Restart policy
    restart: unless-stopped
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
    
    # Security options
    security_opt:
      - no-new-privileges:true
    
    # Network configuration
    networks:
      - chatbot-network

    depends_on:
      chatbot-db:
        condition: service_healthy

  # Frontend service
  chatbot-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: chatbot-frontend:latest
    container_name: chatbot-frontend

    # Production environment
    environment:
      - REACT_APP_API_URL=http://chatbot-api:8000
      - NODE_ENV=production

    # Port mapping
    ports:
      - "3000:80"

    # Health check
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

    # Restart policy
    restart: unless-stopped

    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

    # Security options
    security_opt:
      - no-new-privileges:true

    depends_on:
      - chatbot-api

    # Network configuration
    networks:
      - chatbot-network

  # Optional: Monitoring service
  prometheus:
    image: prom/prometheus:latest
    container_name: chatbot-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - chatbot-network
    profiles:
      - monitoring

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: chatbot-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-storage:/var/lib/grafana
    networks:
      - chatbot-network
    profiles:
      - monitoring

networks:
  chatbot-network:
    driver: bridge

volumes:
  grafana-storage:
  chatbot_db_data_prod:
    driver: local
